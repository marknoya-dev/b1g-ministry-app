// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Bus {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  name                 String @unique
  currCapacity         Int           @default(0)
  maxCapacity          Int           @default(40)
  passengers           Person[] @relation("toVenue_bus")
  status               BusStatus    @default(ON_QUEUE)
  // fromVenue_passengers Participant[] @relation("fromVenue_bus")

  @@map("buses")
}

model Carpool {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  vehicle              String
  plateNumber          String
  driver               Person @relation(fields: [driverId], references: [id])
  driverId             String @unique @db.ObjectId
  passengers           Person[] @relation("toVenue_carpool")
  // fromVenue_passengers Participant[] @relation("fromVenue_carpool")

  @@map("carpools")
}

model Person {
  id                         String @id @default(auto()) @map("_id") @db.ObjectId
  role                       Role 
  ticketCode                 String @unique
  firstName                  String
  lastName                   String
  nickname                   String
  gender                     String
  email                      String
  mobile                     String?
  birthMonth                 Int
  birthYear                  Int
  civilStatus                String
  profession                 String
  workplace                  String
  contactPerson_name         String
  contactPerson_mobile       String?
  contactPerson_relationship String

    
  //Embarkation from Center details
  embarkation_temp           String?
  embarkation_status         EmbarkationStatus @default(PENDING)
  embarkation_checkInTime    String?

  carpoolCar                 Carpool?     
  carpoolRole                String?
  
  rideToVenue                String
  rideToVenue_name           String?
  rideToVenue_Id             String?  @db.ObjectId
  rideToVenue_carpool        Carpool? @relation("toVenue_carpool", fields: [rideToVenue_Id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  rideToVenue_bus            Bus?     @relation("toVenue_bus", fields: [rideToVenue_Id], references: [id])

  //Embarkation from MMRC details
  // rideFromVenue         String?
  // rideFromVenue_Id      String?  @db.ObjectId
  // rideFromVenue_carpool Carpool? @relation("fromVenue_carpool", fields: [rideFromVenue_Id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  // rideFromVenue_bus     Bus?     @relation("fromVenue_bus", fields: [rideFromVenue_Id], references: [id])

  medicalCondition     String?
  foodRestriction      String?
  dgroup_leader        String
  satellite_loc        String
  age                  Int
  workshop1            String?
  workshop2            String?
  teamName             String?
  room                 String
  hasWaiver            Boolean @default(false)
  // roomId               String? @db.ObjectId
  // room                 Room?   @relation("room", fields: [roomId], references: [id])

  devo                 Int?
  @@map("person")
}

// model Room {
//   id        String        @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   capacity  Int
//   occupants Participant[] @relation("room")

//   @@map("rooms")
// }

enum EmbarkationStatus {
  PENDING
  CHECKED_IN
  IN_TRANSIT
  ARRIVED
}

enum BusStatus {
  ON_QUEUE
  BOARDING
  IN_TRANSIT
  ARRIVED
}

enum Role {
  PARTICIPANT
  VOLUNTEER
}